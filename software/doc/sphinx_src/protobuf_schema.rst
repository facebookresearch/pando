.. highlight:: protobuf

===============
Protobuf Schema
===============

General Message Structure
-------------------------

.. _packet:

Packet
______
Datums published by Pando are encapsulated in a single protobuf message type named ``Packet``. This makes it possible for consumers to parse messages without considering the ZMQ topic string they were received under or using the protobuf reflection interface.

.. literalinclude:: pando.proto
   :start-at: message Packet

The header field contains metadata common to all datums, while the payload field contains the actual data.

header.experiment_id
  Starts at 0 and is incremented each time a new experiment is started. This allows messages generated by different experiments to be reliably distinguished.
header.sequence_number
  For each payload type, starts at 0 and is incremented for each message of that type. Non-sequential sequence numbers indicate that messages are being dropped somewhere, usually because the consumer is not keeping up and all ZMQ socket buffers are full.
header.timestamp
  The time since experiment start, in nanoseconds. Where applicable, refers to the start (left edge) of integration periods. If PPS synchronization is enabled, this timestamp is in the sync box time domain.
payload.data
  A `Oneof <https://developers.google.com/protocol-buffers/docs/proto#oneof>`_ containing a single datum.

.. _meta:

Channels and Meta fields
________________________

All of the devices we support have multiple "channels". For example, The HydraHarp has 8 inputs and the PF32 has 1024 pixels. Many of the payload message types described below contain information derived from all enabled channels during the same time interval (eg. one g2 curve from each SPAD calculated from a common Tint.) These message types have a common structure:

#. The payload message contains two nested message types named ``Channel`` and ``Meta``
#. The first field (named ``channels``) is a `map <https://developers.google.com/protocol-buffers/docs/proto3#maps>`_ from a channel index to an instance of the ``Channel`` message type
#. The second field (named ``meta``) is an embedded instance of the ``Meta`` message type.

The channels field contains data that is unique among channels (eg. y values for g2 curves) while the meta field contains data that is common among channels (eg. tau values for g2 curves).

The reason for this structure is that it simplified the design of the HDF5 logger.


.. _raw_types:

Raw Data Message Types
----------------------
These payload types contain unprocessed "raw data" produced by the timetagger device.
  
Timestamps
__________
  
"Timestamps" refers to single photon macro+micro time pairs, produced by the PicoQuant devices or the PF32 in TCSPC mode. Regardless of the device, the units are always in picoseconds.
  
.. literalinclude:: pando.proto
    :start-at: message Timestamps
    :end-before: message Markers

macro_times
  A vector of monotonically increasing photon macrotimes, in picoseconds
micro_times
  A vector of photon microtimes, in picoseconds. Element *n* holds the microtime associated with element *n* in the ``macro_times`` field. Set to all zeros for PicoQuant devices in T2 mode.
  
Histograms
__________

"Histograms" refers to binned photon counts produced by the PF32 in DCS mode.
  
The counts contained in a single instance of this message correspond to a single g2 Tint.

The bin indices stored in sequential messages are contiguous: the ``first_bin_idx`` field of a given message will be one greater than that of the previous message. It is therefore possible to re-segment the data into arbitrary Tints, regardless of the Tint that was used in the original experiment.
  
.. literalinclude:: pando.proto
    :start-at: message Histograms
    :end-before: enum PowerUnit

bin_size
  The histogram bin width in nanoseconds
first_bin_idx
  The experiment-global index of the first bin stored in the counts field
last_bin_idx
  The experiment-global index of the last bin stored in the counts field
counts
  An array of last_bin_idx - first_bin_idx + 1 photon counts from contiguous bins with indices first_bin_idx through last_bin_idx


Markers
_______
Both PicoQuant devices and the PF32 have a "marker channels" feature where the device assigns timestamps to edges on a handful of TTL compatible digital inputs. This message type is identical to :ref:`Timestamps`, except there is no micro_times field.

.. literalinclude:: pando.proto
    :start-at: message Markers
    :end-before: message G2


.. _analyzed_types:

Analyzed Data Message Types
----------------------------
These payload types contain the results of processing performed by Pando.

G2
__

A collection of g2 curves (one for each channel) from a single Tint.

.. literalinclude:: pando.proto
   :start-at: message G2
   :end-before: message G2i

channel_1/channel_2
  These two fields indicate the channels from which data was crosscorrelated. Currently, only autocorrelation is supported, so the fields always match.
dt
  The tau resolution, in floating point seconds. Currently always 1.0e-9 (1 nanosecond)
k
 An array of tau (correlation offset) values, in units specified by the dt field.
g2
  An array of normalized g2 values


G2i
___

.. literalinclude:: pando.proto
   :start-at: message G2i
   :end-before: message Dtof

Same as `G2`_, but with the following additional fields:

utime_from_ps
  Left edge (inclusive) of the microtime ROI that g2 was computed over, in picoseconds
utime_until_ps
  Right edge (inclusive) of the microtime ROI that g2 was computed over, in picoseconds


Counts
______

Photon counts.

.. literalinclude:: pando.proto
   :start-at: message Counts
   :end-before: enum EventType

count
  The number of photons counted during the integration period
integration_period_ns
  The length of the CR integration period, in nanoseconds

Cri
___
Photon counts within a microtime ROI.

.. literalinclude:: pando.proto
   :start-at: message Cri
   :end-before: message Counts

count
  The number of photons with microtimes inside the ROI counted during the integration period
integration_period_ns
  The length of the CRi integration period, in nanoseconds
utime_from_ps
  Left edge (inclusive) of the microtime ROI, in picoseconds
utime_until_ps
  Right edge (inclusive) of the microtime ROI, in picoseconds

Dtof
____

Histogram of microtimes.

.. literalinclude:: pando.proto
   :start-at: message Dtof
   :end-before: message Cri

resolution
  The width of a single bin in the DTOF, in picoseconds
range_min
  The left edge of the leftmost bin in the DTOF, in picoseconds
range_max
  The left edge of the rightmost bin in the DTOF, in picoseconds. Note: the right edge of the rightmost bin is range_max + resolution
counts
  An array of counts for each bin
integration_period_ns
  The length of the DTOF integration period, in nanoseconds


PpsStats
________

When PPS synchronization is enabled, this message is published each time a PPS pulse is detected.

.. literalinclude:: pando.proto
   :start-at: message PpsStats
   :end-before: message TrafficGen

offset_ns
  The instantaneous offset between the timetagger time domain and the sync box time domain, in nanoseconds. Positive values mean that the timetagger Is ahead of the sync box.
jitter_ns
  The delta of offset_ns relative to its previous value, in nanoseconds. Positive values mean that the timetagger is running faster than the sync box.


.. _peripheral_types:

Peripheral Data Message Types
------------------------------
These payload types contain data acquired by Pandoboxd (the Pando companion application that runs on the sync box.)

They're fairly self explanatory: They each represent a single sample from a single data stream.

The ``device_id`` fields indicate which device the sample came from. Currently, this is only useful in the case of the ``DigitalIn`` message type, because we don't have multiple instances of any of the other devices (there are 8 digital inputs.) It would be straightforward to add them, though.

.. literalinclude:: pando.proto
   :start-at: message Imu
   :end-before: message PpsStats
