# Taken from platform.hpp generated by CMake
LIBZMQ_WINDOWS_PLATFORM_DEFINES = [
    "/DZMQ_USE_CV_IMPL_STL11",
    "/DZMQ_IOTHREAD_POLLER_USE_EPOLL",
    "/DZMQ_POLL_BASED_ON_SELECT",
    "/DZMQ_CACHELINE_SIZE=64",
    "/DZMQ_HAVE_NOEXCEPT",
    "/DZMQ_HAVE_CURVE",
    "/DZMQ_USE_TWEETNACL",
    "/DZMQ_HAVE_WINDOWS",
]

LIBZMQ_LINUX_PLATFORM_DEFINES = [
    "-DZMQ_USE_CV_IMPL_STL11",
    "-DZMQ_IOTHREAD_POLLER_USE_EPOLL",
    "-DZMQ_IOTHREAD_POLLER_USE_EPOLL_CLOEXEC",
    "-DZMQ_POLL_BASED_ON_POLL",
    "-DZMQ_CACHELINE_SIZE=64",
    "-DHAVE_FORK",
    "-DHAVE_CLOCK_GETTIME",
    "-DHAVE_MKDTEMP",
    "-DZMQ_HAVE_UIO",
    "-DZMQ_HAVE_NOEXCEPT",
    "-DZMQ_HAVE_EVENTFD",
    "-DZMQ_HAVE_IFADDRS",
    "-DZMQ_HAVE_SO_PEERCRED",
    "-DHAVE_ACCEPT4",
    "-DHAVE_STRNLEN",
    "-DZMQ_HAVE_CURVE",
    "-DZMQ_USE_TWEETNACL",
    "-DZMQ_HAVE_LINUX",
]

# Make an empty platform.hpp
genrule(
    name = "gen_empty_platform_hpp",
    bash = "touch $OUT",
    cmd_exe = "copy /y NUL %OUT%",
    out = "platform.hpp",
)

# A genrule can't be referenced in raw_headers, so use a shim cxx_library
cxx_library(
    name = "platform_hpp",
    exported_headers = [
        ":gen_empty_platform_hpp",
    ],
    header_namespace = "",
)

cxx_library(
    name = "libzmq",
    compatible_with = [
        "config//:windows-x86_64",
        "config//:linux-x86_64",
        "config//:linux-xilinx-aarch64",
    ],
    preferred_linkage = "static",
    srcs = glob([
        "libzmq/src/*.c",
        "libzmq/src/*.cpp",
    ]) + select({
        "config//os:windows": [
            "libzmq/external/wepoll/wepoll.c",
        ],
        "DEFAULT": [
        ],
    }),
    include_directories = [
        "libzmq/src",
    ] + select({
        "config//os:windows": [
            "libzmq/external/wepoll",
        ],
        "DEFAULT": [
        ],
    }),
    public_include_directories = ["libzmq/include"],
    exported_linker_flags = select({
        "config//os:windows": [
            "Advapi32.lib",
            "Rpcrt4.lib",
            "WS2_32.lib",
            "iphlpapi.lib",
        ],
        "DEFAULT": [
            "-pthread",
        ],
    }),
    preprocessor_flags = select({
        "config//:windows-x86_64": LIBZMQ_WINDOWS_PLATFORM_DEFINES + [
            "/DFD_SETSIZE=16384",
            "/D_CRT_SECURE_NO_WARNINGS",
            "/D_REENTRANT",
            "/D_THREAD_SAFE",
            "/D_WINSOCK_DEPRECATED_NO_WARNINGS",
        ],
        "config//:linux-x86_64": LIBZMQ_LINUX_PLATFORM_DEFINES + [
            "-D_GNU_SOURCE",
        ],
        "config//:linux-xilinx-aarch64": LIBZMQ_LINUX_PLATFORM_DEFINES + [
            "-D_GNU_SOURCE",
        ],
    }),
    exported_preprocessor_flags = [
        "-DZMQ_STATIC",
    ] + select({
        "config//os:windows": [
        ],
        "DEFAULT": [
            "-pthread",
        ],
    }),
    raw_headers = glob([
        "libzmq/include/**/*.h",
        "libzmq/src/*.hpp",
        "libzmq/src/*.h",
    ]) + select({
        "config//os:windows": [
            "libzmq/external/wepoll/wepoll.h",
        ],
        "DEFAULT": [
        ],
    }),
    deps = [
        ":platform_hpp",
    ],
    visibility = ["PUBLIC"],
)

cxx_library(
    name = "cppzmq",
    preferred_linkage = "static",
    exported_deps = [
        ":libzmq",
    ],
    public_include_directories = ["cppzmq"],
    raw_headers = glob(
        ["cppzmq/*.hpp"],
    ),
    visibility = ["PUBLIC"],
)
